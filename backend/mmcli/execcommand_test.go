// Code generated by mockery. DO NOT EDIT.

package mmcli

import mock "github.com/stretchr/testify/mock"

// ExecCommandMock is an autogenerated mock type for the ExecCommand type
type ExecCommandMock struct {
	mock.Mock
}

type ExecCommandMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecCommandMock) EXPECT() *ExecCommandMock_Expecter {
	return &ExecCommandMock_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: name, arg
func (_m *ExecCommandMock) Execute(name string, arg ...string) ExecCommandOutput {
	_va := make([]interface{}, len(arg))
	for _i := range arg {
		_va[_i] = arg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 ExecCommandOutput
	if rf, ok := ret.Get(0).(func(string, ...string) ExecCommandOutput); ok {
		r0 = rf(name, arg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ExecCommandOutput)
		}
	}

	return r0
}

// ExecCommandMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ExecCommandMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - name string
//   - arg ...string
func (_e *ExecCommandMock_Expecter) Execute(name interface{}, arg ...interface{}) *ExecCommandMock_Execute_Call {
	return &ExecCommandMock_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{name}, arg...)...)}
}

func (_c *ExecCommandMock_Execute_Call) Run(run func(name string, arg ...string)) *ExecCommandMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ExecCommandMock_Execute_Call) Return(_a0 ExecCommandOutput) *ExecCommandMock_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecCommandMock_Execute_Call) RunAndReturn(run func(string, ...string) ExecCommandOutput) *ExecCommandMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecCommandMock creates a new instance of ExecCommandMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecCommandMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecCommandMock {
	mock := &ExecCommandMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
