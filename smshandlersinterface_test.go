// Code generated by mockery. DO NOT EDIT.

package main

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// smsHandlersInterfaceMock is an autogenerated mock type for the smsHandlersInterface type
type smsHandlersInterfaceMock struct {
	mock.Mock
}

type smsHandlersInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *smsHandlersInterfaceMock) EXPECT() *smsHandlersInterfaceMock_Expecter {
	return &smsHandlersInterfaceMock_Expecter{mock: &_m.Mock}
}

// SmsDelete provides a mock function with given fields: w, r
func (_m *smsHandlersInterfaceMock) SmsDelete(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// smsHandlersInterfaceMock_SmsDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SmsDelete'
type smsHandlersInterfaceMock_SmsDelete_Call struct {
	*mock.Call
}

// SmsDelete is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *smsHandlersInterfaceMock_Expecter) SmsDelete(w interface{}, r interface{}) *smsHandlersInterfaceMock_SmsDelete_Call {
	return &smsHandlersInterfaceMock_SmsDelete_Call{Call: _e.mock.On("SmsDelete", w, r)}
}

func (_c *smsHandlersInterfaceMock_SmsDelete_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *smsHandlersInterfaceMock_SmsDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *smsHandlersInterfaceMock_SmsDelete_Call) Return() *smsHandlersInterfaceMock_SmsDelete_Call {
	_c.Call.Return()
	return _c
}

func (_c *smsHandlersInterfaceMock_SmsDelete_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *smsHandlersInterfaceMock_SmsDelete_Call {
	_c.Call.Return(run)
	return _c
}

// SmsGet provides a mock function with given fields: w, r
func (_m *smsHandlersInterfaceMock) SmsGet(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// smsHandlersInterfaceMock_SmsGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SmsGet'
type smsHandlersInterfaceMock_SmsGet_Call struct {
	*mock.Call
}

// SmsGet is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *smsHandlersInterfaceMock_Expecter) SmsGet(w interface{}, r interface{}) *smsHandlersInterfaceMock_SmsGet_Call {
	return &smsHandlersInterfaceMock_SmsGet_Call{Call: _e.mock.On("SmsGet", w, r)}
}

func (_c *smsHandlersInterfaceMock_SmsGet_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *smsHandlersInterfaceMock_SmsGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *smsHandlersInterfaceMock_SmsGet_Call) Return() *smsHandlersInterfaceMock_SmsGet_Call {
	_c.Call.Return()
	return _c
}

func (_c *smsHandlersInterfaceMock_SmsGet_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *smsHandlersInterfaceMock_SmsGet_Call {
	_c.Call.Return(run)
	return _c
}

// SmsSend provides a mock function with given fields: w, r
func (_m *smsHandlersInterfaceMock) SmsSend(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// smsHandlersInterfaceMock_SmsSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SmsSend'
type smsHandlersInterfaceMock_SmsSend_Call struct {
	*mock.Call
}

// SmsSend is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *smsHandlersInterfaceMock_Expecter) SmsSend(w interface{}, r interface{}) *smsHandlersInterfaceMock_SmsSend_Call {
	return &smsHandlersInterfaceMock_SmsSend_Call{Call: _e.mock.On("SmsSend", w, r)}
}

func (_c *smsHandlersInterfaceMock_SmsSend_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *smsHandlersInterfaceMock_SmsSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *smsHandlersInterfaceMock_SmsSend_Call) Return() *smsHandlersInterfaceMock_SmsSend_Call {
	_c.Call.Return()
	return _c
}

func (_c *smsHandlersInterfaceMock_SmsSend_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *smsHandlersInterfaceMock_SmsSend_Call {
	_c.Call.Return(run)
	return _c
}

// newSmsHandlersInterfaceMock creates a new instance of smsHandlersInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newSmsHandlersInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *smsHandlersInterfaceMock {
	mock := &smsHandlersInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
